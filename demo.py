# pip install streamlit faiss-cpu sentence-transformers langchain transformers langchain_community

import streamlit as st
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from transformers import pipeline

# --- Load data v√† t·∫°o vector store ---
@st.cache_resource
def load_retriever():
    # ƒê·ªçc n·ªôi dung file
    with open("tuyensinh.txt", "r", encoding="utf-8") as f:
        raw_text = f.read()

    # Chia ƒëo·∫°n
    splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    texts = splitter.split_text(raw_text)

    # Embedding
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
    db = FAISS.from_texts(texts, embeddings)

    return db.as_retriever()

retriever = load_retriever()

# --- Load LLM ---
@st.cache_resource
def load_llm():
    generator = pipeline("text-generation", model="microsoft/phi-2", tokenizer="microsoft/phi-2")
    return generator

generator = load_llm()

# --- H√†m tr·∫£ l·ªùi ---
def generate_answer(query):
    docs = retriever.get_relevant_documents(query)
    context = "\n".join([doc.page_content for doc in docs[:3]])

    prompt = f"""D·ª±a tr√™n ng·ªØ c·∫£nh sau, h√£y tr·∫£ l·ªùi c√¢u h·ªèi:
                Ng·ªØ c·∫£nh:
                {context}
                C√¢u h·ªèi:
                {query}
                Tr·∫£ l·ªùi: """

    result = generator(prompt, max_new_tokens=200, do_sample=True)[0]["generated_text"]
    return result[len(prompt):].strip()  # lo·∫°i b·ªè ph·∫ßn prompt g·ªëc

# --- Giao di·ªán Streamlit ---
st.set_page_config(page_title="Truong ...", layout="centered")
st.title("ü§ñ Chatbot ho tro tuyen sinh")

user_input = st.text_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:")

if st.button("Tr·∫£ l·ªùi"):
    if user_input:
        with st.spinner("ƒêang truy xu·∫•t v√† sinh c√¢u tr·∫£ l·ªùi..."):
            answer = generate_answer(user_input)
            st.success("‚úÖ C√¢u tr·∫£ l·ªùi:")
            st.write(answer)
    else:
        st.warning("‚ùó Vui l√≤ng nh·∫≠p c√¢u h·ªèi.")

