# pip install streamlit faiss-cpu sentence-transformers langchain transformers langchain_community

import streamlit as st
from transformers import pipeline
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS

# C·∫•u h√¨nh Streamlit
st.set_page_config(page_title="FPT Chatbot", layout="centered")
st.title("ü§ñ Chatbot h·ªó tr·ª£ tuy·ªÉn sinh FPT Polytechnic")

# Load d·ªØ li·ªáu v√† t·∫°o vector store
@st.cache_resource
def load_retriever():
    with open("tuyensinh.txt", "r", encoding="utf-8") as f:
        raw_text = f.read()

    splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    texts = splitter.split_text(raw_text)

    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
    db = FAISS.from_texts(texts, embedding=embeddings)

    return db.as_retriever()

retriever = load_retriever()

# Load m√¥ h√¨nh sinh ti·∫øng Vi·ªát 
@st.cache_resource
def load_model():
    return pipeline("text-generation", model="NlpHUST/gpt2-vietnamese", repetition_penalty=1.3)

generator = load_model()

# H√†m sinh c√¢u tr·∫£ l·ªùi
def generate_answer(query):
    docs = retriever.get_relevant_documents(query)

    if not docs:
        return "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y."

    context = "\n".join([doc.page_content for doc in docs[:3]])

    prompt = f"""B·∫°n l√† tr·ª£ l√Ω tuy·ªÉn sinh FPT Polytechnic. Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin trong ph·∫ßn NG·ªÆ C·∫¢NH ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi."
                NG·ªÆ C·∫¢NH: {context}
                C√ÇU H·ªéI: {query}
                TR·∫¢ L·ªúI:
              """

    output = generator(prompt, max_new_tokens=100, do_sample=True, top_p=0.85, temperature=0.7, truncation=True)[0]["generated_text"]
    answer = output[len(prompt):].strip()

    for end in [".", "\n", "‚Ä¢", ":"]:
        if end in answer:
            answer = answer.split(end)[0] + end
            break

    return answer.strip()


# Giao di·ªán ng∆∞·ªùi d√πng
user_input = st.text_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:")

if st.button("Tr·∫£ l·ªùi"):
    if user_input:
        with st.spinner("ƒêang truy xu·∫•t v√† sinh c√¢u tr·∫£ l·ªùi..."):
            answer = generate_answer(user_input)
            st.success("‚úÖ C√¢u tr·∫£ l·ªùi:")
            st.write(answer)
    else:
        st.warning("‚ùó Vui l√≤ng nh·∫≠p c√¢u h·ªèi.")
